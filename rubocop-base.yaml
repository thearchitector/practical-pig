#
# RuboCop is a Ruby static code analyzer and code formatter that tries to enforce many of
# the guidelines outlined in the community Ruby and Rails
# style guides.
#
# https://docs.rubocop.org/en/latest/
# https://rubystyle.guide/
# https://rails.rubystyle.guide/
require:
  - rubocop-rails
  - rubocop-performance
  - rubocop-minitest
AllCops:
  Exclude:
    - "**/node_modules/**/*"
    - "**/db/schema.rb"
    - "**/bin/**/*"
    - "**/vendor/**/*"

# force length length checking and auto-correction. this is here to enforce
# standardization; however, it is good practice keep lines <= 90 columns when
# programming so they remain readable. omit conifg initializers from line-length
# checking as they are often auto-generated and thus result in tons of comment
# length conflicts.
Layout/LineLength:
  Enabled: true
  AutoCorrect: true
  Max: 90
  Exclude:
    - "**/config/initializers/**/*"

# when Layout/LineLength triggers, ensure that the output remains human-readable.
# arguments to methods, pairs in hashes, and array elements should reside on
# separate lines from the constructor.
Layout/FirstArgumentIndentation:
  Enabled: true
  EnforcedStyle: special_for_inner_method_call
Layout/FirstArrayElementIndentation:
  Enabled: true
  EnforcedStyle: consistent
Layout/FirstHashElementIndentation:
  Enabled: true
  EnforcedStyle: consistent
Layout/FirstArrayElementLineBreak:
  Enabled: true
Layout/FirstHashElementLineBreak:
  Enabled: true

# case statements should be indended one level from the block to mitigate
# confusion and make clear possible execution branches
Layout/CaseIndentation:
  IndentOneStep: true

# consistent class structure is important when defining data models and handlers.
# while it does not affect functionality, consistent organizational patterns make
# understanding functions and behaviors easier across an entire application.
#
# https://docs.rubocop.org/en/latest/cops_layout/#layoutclassstructure
Layout/ClassStructure:
  Enabled: true

# separating variables from their assignments when dealing with multiline expressions
# disconnects them from their values. to prevent confusion and lack of behavioral
# clarity, value expressions should always begin (and preferebly end) on the line
# of assignment.
Layout/MultilineAssignmentLayout:
  Enabled: true
  EnforcedStyle: same_line

Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: true

Layout/SpaceAroundMethodCallOperator:
  Enabled: true

# this simply doesn't work in a cross-platform development environment. Bit
# flags across UNIX and Windows platforms are volatile, and thus there is no
# way to ensure this passes besides explicitly granting execute permissions
# in CI config (which would defeat the purpose).
Lint/ScriptPermission:
  Enabled: false

Lint/RaiseException:
  Enabled: true

Lint/StructNewOverride:
  Enabled: true

# functionalization is important, but the Rails' idiom for returning key-value
# maps can raise a false alarm with the max line number (10). increase the value
# to something more reasonable given the circumstances.
Metrics/MethodLength:
  Enabled: true
  Max: 20

# omit rake tasks, Gemfiles, and gemspecs from block length checks, as they
# can be fairly complex and are not subject to segmentation.
Metrics/BlockLength:
  Enabled: true
  Exclude:
    - "**/*.rake"
    - "**/*.gemspec"
    - "**/Gemfile"

# flags methods that violate the an ABC magnitude of >16. The ABC metric
# quantizes the size of a method, and is calculated based on the number of
# assignment operations, possible execution branches, and number of conditionals.
#
# https://en.wikipedia.org/wiki/ABC_Software_Metric
Metrics/AbcSize:
  Enabled: true
  Max: 16

# disable documentation checking. many classes do not require top-level comments,
# and their inclusion can actually obscure their function.
Style/Documentation:
  Enabled: false

# flag potential memory leaks, like when opening a file.
Style/AutoResourceCleanup:
  Enabled: true

# single quotes are meant for single characters. double quotes are meant for
# strings, which are arrays of multiple characters. there are a whole host of
# other differences and functions; if you're creating a string, you nearly always
# should use double quotes.
#
# https://en.wikipedia.org/wiki/Delimiter#Bracket_delimiters
# Schwartz, Randal (2005). Learning Perl. ISBN 978-0-596-10105-3.
Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes
Style/StringLiteralsInInterpolation:
  Enabled: true
  EnforcedStyle: double_quotes

# by default Ruby makes all defined constants public, which litters the
# public API of the class or module. Explicitly declaring a visibility makes intent
# more clear and prevents outside actors from touching private states.
Style/ConstantVisibility:
  Enabled: true

# the bracket idiom [:hi, :bye] is clearer when compared to the percent
# idiom %i[hi bye] as it does not obfuscate the data structure (an array of symbols).
Style/SymbolArray:
  Enabled: true
  EnforcedStyle: brackets

# the bracket idiom ["hi", "bye"] is clearer when compared to the percent
# idiom %w[hi bye] as it does not obfuscate the data structure (an array of strings).
Style/WordArray:
  Enabled: true
  EnforcedStyle: brackets

# in Ruby, methods don't have to be called with parantheses. however their omission
# can cause confusion about which expressions are being passed to the caller,
# especialy if that method is being called from within an array or hash. force
Style/MethodCallWithArgsParentheses:
  Enabled: true
  IgnoredMethods:
    - require
    - require_relative
    - puts
    - raise
    - say
  Exclude:
    - "**/Gemfile"
    - "**/*.gemspec"

# method signatures should never span multiple lines as that obfuscates the data
# on which method might depend/function.
Style/MultilineMethodSignature:
  Enabled: true

# by definition, constants should not be mutable. ensure that the constant expression
# is frozen so that any future modifications raise a runtime exception.
Style/MutableConstant:
  Enabled: true
  EnforcedStyle: strict

# parentheses should be used in situations with complex ternary assignments, as they
# help distinguish between conditional and expression.
Style/TernaryParentheses:
  Enabled: true
  EnforcedStyle: require_parentheses_when_complex

# methods that manipulate and return multiple values are allowed, as it tends to
# yield clearer and more concise code and methods.
Style/RedundantReturn:
  Enabled: true
  AllowMultipleReturnValues: true

Style/ExponentialNotation:
  Enabled: true

Style/HashEachMethods:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

Style/SlicingWithRange:
  Enabled: true
